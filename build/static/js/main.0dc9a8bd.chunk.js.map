{"version":3,"sources":["services/personsService.js","App.js","index.js"],"names":["baseUrl","exportedObject","getAll","axios","get","create","newObject","post","update","id","put","remove","delete","Notification","notificationObj","message","notificationType","console","log","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","error","PhoneBookEntry","person","persons","setPersons","setFilterString","name","number","onClick","window","confirm","personService","then","response","status","personsCopy","JSON","parse","stringify","itemToDelete","find","item","index","indexOf","splice","handleDelete","Filter","filterString","setPhoneBookEntriesToShow","value","onChange","e","target","filterResult","filter","toLowerCase","includes","PersonForm","props","newName","setNewName","newNumber","setNewNumber","setNotificationObj","onSubmit","preventDefault","personObject","map","existingPerson","itemToUpdate","data","catch","concat","type","Persons","phoneBookEntriesToShow","App","useState","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dc9a8bd.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst exportedObject = { getAll, create, update, remove }\r\n\r\nexport default exportedObject","import React, { useEffect, useState } from 'react'\r\nimport personService from './services/personsService'\r\n\r\nconst Notification = ({ notificationObj }) => {\r\n  const message = notificationObj.message\r\n  const notificationType = notificationObj.notificationType\r\n\r\n  const okStyle = {\r\n    color: 'green',\r\n    background: 'lightgrey',\r\n    fontSize: '20px',\r\n    borderStyle: 'solid',\r\n    borderRadius: '5px',\r\n    padding: '10px',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n  const errorStyle = {\r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    fontSize: '20px',\r\n    borderStyle: 'solid',\r\n    borderRadius: '5px',\r\n    padding: '10px',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n  console.log('notificationObj: ', notificationObj)\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  if (notificationType === \"ok\") {\r\n    return (\r\n      <div style={okStyle}>\r\n        {message}\r\n      </div>\r\n    )\r\n  } else if (notificationType === \"error\") {\r\n    return (\r\n      <div style={errorStyle}>\r\n        {message}\r\n      </div>\r\n    )\r\n  } else {\r\n    console.error('Invalid notification type: ', notificationType)\r\n    return null\r\n  }\r\n} \r\n\r\nconst PhoneBookEntry = ({person, persons, setPersons, setFilterString}) => {\r\n  const handleDelete = (person) => {\r\n    if (window.confirm(`Delete ${person.name}?`)) {\r\n      personService \r\n        .remove(person.id)\r\n        .then(response => {\r\n          console.log('delete promise fulfilled: ', response)\r\n          setFilterString('Erase this to see change')\r\n          if (response.status === 204) {\r\n            let personsCopy = JSON.parse(JSON.stringify(persons));\r\n            const itemToDelete = personsCopy.find(item => item.id === person.id)\r\n            const index = personsCopy.indexOf(itemToDelete)\r\n            if (index > -1) {\r\n              personsCopy.splice(index, 1)\r\n            }\r\n            console.log('personsCopy after splicing: ', personsCopy)\r\n            setPersons(personsCopy)\r\n          }     \r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {person.id} | {person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Filter = ({persons, filterString, setFilterString, setPhoneBookEntriesToShow}) => {\r\n  const handleFilterStringChange = (e) => {\r\n    setFilterString(e.target.value)\r\n    console.log('persons in handleFilterStringChange(): ', persons)\r\n    const filterResult = persons.filter(person => \r\n      person.name.toLowerCase().includes(e.target.value.toLowerCase()))\r\n    setPhoneBookEntriesToShow(filterResult)\r\n    console.log('filterResult: ', filterResult)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      filter shown with \r\n      <input \r\n        value = {filterString}\r\n        onChange = {handleFilterStringChange} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  const persons = props.persons\r\n  const setPersons = props.setPersons\r\n  const newName = props.newName\r\n  const setNewName = props.setNewName\r\n  const newNumber = props.newNumber\r\n  const setNewNumber = props.setNewNumber\r\n  const setFilterString = props.setFilterString\r\n  const setNotificationObj = props.setNotificationObj\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault()\r\n\r\n    const personObject = {\r\n      name : newName,\r\n      number : newNumber\r\n    }\r\n    console.log('before duplicate check persons: ', persons, 'personObject: ', personObject)\r\n\r\n    if (persons.map(person => person.name).includes(newName)) {\r\n      console.log('before update confirmation persons: ', persons)\r\n      if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\r\n        const existingPerson = persons.find(person => person.name === newName)\r\n        console.log('persons: ', persons, 'existingPerson: ', existingPerson)\r\n        personService\r\n          .update(existingPerson.id, personObject)\r\n          .then(response => {\r\n            console.log('update promise fulfilled: ', response)\r\n            setFilterString('Erase this to see change')\r\n            if (response.status === 200) {\r\n              let personsCopy = JSON.parse(JSON.stringify(persons));\r\n              const itemToUpdate = personsCopy.find(item => item.id === response.data.id)\r\n              console.log('itemToUpdate: ', itemToUpdate)\r\n              const index = personsCopy.indexOf(itemToUpdate)\r\n              if (index > -1) {\r\n                personsCopy[index] = response.data\r\n              }\r\n              setPersons(personsCopy)\r\n              setNotificationObj({message: `Phone number of ${response.data.name} changed to ${response.data.number}`, notificationType: 'ok'})\r\n              setNewName('')\r\n              setNewNumber('')\r\n            } \r\n          })\r\n          .catch(error => {\r\n            console.log('update promise error: ', error)\r\n            setNotificationObj({message: error.response.data.error, notificationType: 'error'})\r\n          })\r\n      }\r\n      return\r\n    }\r\n\r\n    personService\r\n      .create(personObject)\r\n      .then(response => {\r\n        setPersons(persons.concat(response.data))\r\n        setNotificationObj({message: `Added ${response.data.name}`, notificationType: 'ok'})\r\n        setNewName('')\r\n        setNewNumber('')\r\n        setFilterString('Erase this to see change')\r\n      })\r\n      .catch(error => {\r\n        console.log('error caught during person create: ', error.response.data)\r\n        setNotificationObj({message: error.response.data.error, notificationType: 'error'})\r\n      })\r\n  }\r\n\r\n  const handleNameChange = (e) => {\r\n    console.log('input value changed: ', e.target.value)\r\n    setNewName(e.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (e) => {\r\n    console.log('input value changed: ', e.target.value)\r\n    setNewNumber(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n        <div>\r\n          name: \r\n            <input \r\n              value = {newName}\r\n              onChange = {handleNameChange} \r\n            />\r\n            <br/>\r\n          number:\r\n            <input \r\n              value = {newNumber}\r\n              onChange = {handleNumberChange}\r\n            />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Persons = ({phoneBookEntriesToShow, persons, setPersons, setFilterString}) => {\r\n  return (\r\n    <div>\r\n        {phoneBookEntriesToShow.map(person =>\r\n          <div key={person.name}>\r\n            <PhoneBookEntry \r\n              person = {person}\r\n              persons = {persons}\r\n              setPersons = {setPersons}\r\n              setFilterString = {setFilterString}\r\n            />\r\n          </div>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  // const [persons, setPersons] = useState([\r\n  //   { name: 'Arto Hellas', number: '040-123456' },\r\n  //   { name: 'Ada Lovelace', number: '39-44-5323523' },\r\n  //   { name: 'Dan Abramov', number: '12-43-234345' },\r\n  //   { name: 'Mary Poppendieck', number: '39-23-6423122' }\r\n  // ]) \r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filterString, setFilterString ] = useState('Erase this to see change')\r\n  const [ phoneBookEntriesToShow, setPhoneBookEntriesToShow ] = useState(persons)\r\n  const [ notificationObj, setNotificationObj ] = useState({message: null, notificationType: 'ok'})\r\n\r\n  useEffect(() => {\r\n    console.log('getAll effect start execution')\r\n    personService\r\n      .getAll()\r\n      .then(response => {\r\n        console.log('promise fulfilled: ', response.data)\r\n        setPersons(response.data)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook (with streamlined deployment)</h2>\r\n      <Notification notificationObj={notificationObj} />\r\n      <Filter \r\n        persons = {persons}\r\n        filterString = {filterString}\r\n        setFilterString = {setFilterString}\r\n        setPhoneBookEntriesToShow = {setPhoneBookEntriesToShow}\r\n      />\r\n      \r\n      <h3>Add new</h3>\r\n      <PersonForm \r\n          persons = {persons}\r\n          setPersons = {setPersons}\r\n          newName = {newName}\r\n          setNewName = {setNewName}\r\n          newNumber = {newNumber}\r\n          setNewNumber = {setNewNumber}\r\n          setFilterString = {setFilterString}\r\n          setNotificationObj = {setNotificationObj}\r\n      />\r\n\r\n      <h3>Numbers</h3>\r\n      <p>\r\n        Note: Newly added persons will not automatically reflect in the following list.\r\n        Please erase the filter input field to see the newly added person.\r\n      </p>\r\n      <Persons \r\n        phoneBookEntriesToShow = {phoneBookEntriesToShow}\r\n        persons = {persons}\r\n        setPersons = {setPersons}\r\n        setFilterString = {setFilterString}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}